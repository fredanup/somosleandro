// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum PosterSource {
  RAW
  GITHUB
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?          @unique
  lastName       String?
  email          String?          @unique
  address        String?
  phone          String?
  emailVerified  DateTime?        @map("email_verified")
  image          String?
  roomId         String?
  accounts       Account[]
  sessions       Session[]
  Video          Video[]
  Document       Document[]
  Calling        Calling[]
  Room           ApplicantRoom?   @relation(name: "Room", fields: [roomId], references: [id])
  Applicants     ApplicantRoom[]  @relation(name: "Applicant")
  Message        Message[]
  Payment        Payment[]
  Identification Identification[]
}

model Identification {
  id     String  @id @default(cuid())
  type   String
  number String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Payment {
  id                 String          @id @default(cuid())
  transaction_amount Int
  token              String
  description        String
  installments       Int
  payment_method_id  String
  issuer_id          String
  payer              String
  User               User            @relation(fields: [payer], references: [id])
  AplicantRoom       ApplicantRoom[]
}

model ApplicantRoom {
  id          String    @id @default(cuid())
  callingId   String
  applyStatus String
  applicantId String
  paymentId   String?
  createdAt   DateTime  @default(now())
  Applicant   User      @relation(name: "Applicant", fields: [applicantId], references: [id])
  Calling     Calling   @relation(fields: [callingId], references: [id], onDelete: Cascade)
  Users       User[]    @relation(name: "Room")
  Message     Message[]
  Payment     Payment?  @relation(fields: [paymentId], references: [id])
}

model Message {
  id              String         @id @default(cuid())
  text            String?
  createdAt       DateTime       @default(now())
  userName        String?        @default(cuid())
  updatedAt       DateTime       @updatedAt
  userId          String?
  applicantRoomId String?
  User            User?          @relation(fields: [userId], references: [id])
  ApplicantRoom   ApplicantRoom? @relation(fields: [applicantRoomId], references: [id])
}

model Video {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(50)
  author    String   @db.VarChar(30)
  createdAt DateTime @default(now())
  key       String
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
}

model Document {
  id        Int      @id @default(autoincrement())
  document  String   @map("doc_academico") @db.VarChar(22)
  key       String
  createdAt DateTime @default(now())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])
}

model Calling {
  id                String          @id @default(cuid())
  applicantNumber   Int             @map("nro_postulantes")
  deadlineAt        DateTime        @map("fecha_limite_postulacion") @db.Date
  instrumentLiked   String          @map("instrumento_interes")
  hasInstrument     Boolean?        @map("tiene_instrumento")
  studentAge        Int?            @map("edad_estudiante")
  repertoireLiked   String?         @map("repertorio_interes") @db.VarChar(255)
  atHome            Boolean?        @map("clases_a_domicilio")
  contractTime      String          @map("tiempo_contrata") @db.VarChar(50)
  availableSchedule String          @map("horario_disponible") @db.VarChar(255)
  details           String?         @db.VarChar(255)
  callingTaken      Boolean         @default(false) @map("convocatoria_tomada")
  createdAt         DateTime        @default(now()) @map("fecha_creacion")
  eventType         String          @map("tipo_evento") @db.VarChar(255)
  eventDate         DateTime?       @map("fecha_evento") @db.Date
  eventAddress      String          @map("direccion_evento") @db.VarChar(255)
  serviceLength     String          @map("duracion_servicio")
  hasSoundEquipment Boolean         @map("tiene_equipo_sonido")
  musicianRequired  String          @map("musico_requerido") @db.VarChar(255)
  callingType       String          @map("tipo_convocatoria") @db.VarChar(255)
  userId            String
  User              User            @relation(fields: [userId], references: [id])
  ApplicantRoom     ApplicantRoom[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
